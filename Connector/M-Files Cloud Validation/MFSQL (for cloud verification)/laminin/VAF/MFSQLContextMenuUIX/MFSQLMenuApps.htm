<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
    <meta http-equiv="content-type" content="text/html;charset=UTF-8">

    <!-- Styles used on the dashboard -->
    <style>
        body {
            font-family: Calibri;
        }
        h1,h2,h3,h4,h5,h6{color:#778181;}
        h1,h4,footer{padding-left:10px;}
        ul{
            list-style-type: none;
        }
        h4 {
            display:inline;
        }
          h1, img {
    display: inline-block;
}
    </style>

    <!-- Include the jQuery Core library -->
    <script type="text/javascript" src="jQuery/jquery-1.8.1.min.js"></script>

    <!-- Dashboard implementation -->

    <script>

        function OnNewDashboard(dashboard)
        {

            /// <summary>Dashboard code entry point.</summary>
            /// <param name="dashboard" type="MFiles.Dashboard">The new dashboard object.</param>

            // Register a handler to listen the started event.

            dashboard.Events.Register(Event_Started, getDashboardStartedHandler(dashboard));
        }

        function getDashboardStartedHandler(dashboard) {
            /// <summary>Gets the event handler function for dashboard starting event.</summary>
            /// <param name="dashboard" type="MFiles.Dashboard">The current dashboard object.</param>
            /// <returns type="MFiles.Events.OnStarted">The event handler.</returns>

            // Return the handler function.
            return function () {

                // Set the dashboard window features.
                if (dashboard.CustomData.caption != "MFSQL Connector1") {
                    //dashboard.Window.SetDefaultSize(250, 250, true);
                    //dashboard.Window.Resizable = true;
                    //dashboard.Window.Maximizable = false;
                    //dashboard.Window.Minimizable = false;
                }


                // Set the window title.
                if (dashboard.CustomData.caption == "MFSQL Connector" || dashboard.CustomData.caption == "MFSQL Connector1") {
                    if (dashboard.CustomData.caption == "MFSQL Connector")
                    {
                        dashboard.Window.Title = dashboard.CustomData.caption;
                    }
                    
                    jQuery("#message_placeholder").append(dashboard.Vault.ExtensionMethodOperations.ExecuteVaultExtensionMethod("GetContextMenuJson", ""))
                }
                else
                {
                    // dashboard.ShowMessage("Parameters: " + dashboard.Vault.ExtensionMethodOperations.ExecuteVaultExtensionMethod("GetContextMenuForSelectedObject", dashboard.CustomData.caption));
                    // alert(dashboard.Vault.ExtensionMethodOperations.ExecuteVaultExtensionMethod("GetContextMenuForSelectedObject", dashboard.CustomData.caption));
                    // alert(dashboard.Vault.ExtensionMethodOperations.ExecuteVaultExtensionMethod("GetContextMenuForSelectedObject", dashboard.CustomData.caption))
                    
                    jQuery("#message_placeholder").append(dashboard.Vault.ExtensionMethodOperations.ExecuteVaultExtensionMethod("GetContextMenuForSelectedObject", dashboard.CustomData.caption))
                }



                // Add an action for the button.
                jQuery("#button_ok").click(function () {

                    // Close the dashboard window on button click.
                    dashboard.Window.Close();
                });

                GetResponse = function (ActionType, Action, ConfirmMessage, ID, ISAsync) {

                    var CheckProcess = dashboard.Vault.ExtensionMethodOperations.ExecuteVaultExtensionMethod("GetProcessStatus", ID)
                    var CheckProcess = "true";
                    if (ActionType == '2') {
                        if (confirm(ConfirmMessage) == true) {
                            //window.open(Action, "_blank", "toolbar=yes,scrollbars=yes,resizable=yes,top=500,left=500,width=400,height=400"); Commented for Bug #1062
                            //Added to resolve bug ID #1062
                            var shell = new ActiveXObject("WScript.Shell");
                            shell.run(Action);
                            //Added to resolve bug ID #1062
                        }
                    }
                    else if (ActionType == '1') {
                        if (CheckProcess == "true")
                        {
                            if (ISAsync == "True") {
                                if (confirm(ConfirmMessage) == true) {

                                    // alert(dashboard.Vault.ExtensionMethodOperations.ExecuteVaultExtensionMethod("GetPerformActionJson", Action)) //Old method
                                    dashboard.Vault.ExtensionMethodOperations.ExecuteVaultExtensionMethod("GetPerformActionJson", Action + '|' + ID);
                                }
                            }
                            else {
                                if (confirm(ConfirmMessage) == true) {
                                    alert(dashboard.Vault.ExtensionMethodOperations.ExecuteVaultExtensionMethod("GetPerformAction", Action + '|' + ID));
                                }
                            }
                        }
                        else {
                            alert(CheckProcess);
                        }

                        //New method for asynch call
                        //dashboard.Vault.Async.ExtensionMethodOperations.ExecuteVaultExtensionMethod("GetPerformActionJson", Action, function (response) {

                        //    // Success.
                        //    dashboard.ShowMessage("Response was: " + response);

                        //}, function (message, detail, error) {

                        //    // Failure.
                        //    dashboard.ShowMessage("FAILED: " + message);

                        //}, function () {
                        //    // This is the cleanup function.
                        //});

                    }


                }



                GetResponseForSelectedObject = function (ActionType, Action, ConfirmMessage, ObjectID, ObjectTypeID, ObjectVer, ID, ISAsync, ClassID) {
                     var CheckProcess = dashboard.Vault.ExtensionMethodOperations.ExecuteVaultExtensionMethod("GetProcessStatus",ID)
                   // var CheckProcess = "true";
                    if (ActionType == '2') {
                        if (confirm(ConfirmMessage) == true) {
                            window.open(Action, "_blank", "toolbar=yes,scrollbars=yes,resizable=yes,top=500,left=500,width=400,height=400");
                        }
                    }
                    else if (ActionType == '3') {
                        if (CheckProcess == "true") {
                            if (ISAsync == "True") {
                                if (confirm(ConfirmMessage) == true) {
                                    var Parameters = Action + "|" + ObjectID + "|" + ObjectTypeID + "|" + ObjectVer + "|" + ID + "|" + ClassID;
                                    dashboard.Vault.ExtensionMethodOperations.ExecuteVaultExtensionMethod("GetPerformActionOnSelectedObjectNew", Parameters); //New method for asynch call
                                    //alert(dashboard.Vault.ExtensionMethodOperations.ExecuteVaultExtensionMethod("GetPerformActionOnSelectedObjectNew", Parameters)) //New method for asynch call
                                }
                            }
                            else {
                                if (confirm(ConfirmMessage) == true) {
                                    var Parameters = Action + "|" + ObjectID + "|" + ObjectTypeID + "|" + ObjectVer + "|" + ID + "|" + ClassID;
                                    alert(dashboard.Vault.ExtensionMethodOperations.ExecuteVaultExtensionMethod("GetPerformActionOnSelectedObjectForSynchProcess", Parameters)); //New method for asynch call
                                    //alert(dashboard.Vault.ExtensionMethodOperations.ExecuteVaultExtensionMethod("GetPerformActionOnSelectedObjectNew", Parameters)) //New method for asynch call
                                }
                            }

                        }
                        else {
                            alert(CheckProcess);
                        }
                        //New method for asynch call
                        //dashboard.Vault.Async.ExtensionMethodOperations.ExecuteVaultExtensionMethod("GetPerformActionOnSelectedObjectNew", Parameters, function (response) {

                        //    // Success.
                        //    dashboard.ShowMessage("Response was: " + response);

                        //}, function (message, detail, error) {

                        //    // Failure.
                        //    dashboard.ShowMessage("FAILED: " + message);

                        //}, function () {
                        //    // This is the cleanup function.
                        //});

                    }

                    // }
                }



            };
        }
    </script>
</head>

<!-- The dashboard content -->
<body style="border:1px solid blue;">
    <br/>
    <table>
    <tr>
          <td >
              <img src="./png/MFSQL-Favicon.ico" style="height:15pt; width:25pt;" />
              <h1>MFSQL Connector Menu</h1>
          </td>
        <td >
            
        </td>
    </tr>
    </table>
  
    <hr />
    <!--<div id="subtitle-get-help" class="custom1-section-subtitle"></div>-->

    <p id="message_placeholder">
    </p>
    <hr />
    <center><button id="button_ok" style="display:none;">Close</button></center>
    <footer>MFSQL Context Menu 2017 ©</footer>
    <br />
</body>
</html>