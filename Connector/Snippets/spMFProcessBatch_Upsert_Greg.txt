USE [MFSQL_Mfiles]
GO

/****** Object:  StoredProcedure [dbo].[spMFProcessBatch_Upsert]    Script Date: 25/06/2018 7:57:17 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[spMFProcessBatch_Upsert]
      (
        @ProcessBatch_ID INT OUTPUT
      , @ProcessType NVARCHAR(50) = NULL -- (Debug | | Upsert | Create |Setup |Error)
      , @LogType NVARCHAR(50) = 'Status'-- (Start | End)
      , @LogText NVARCHAR(4000) = NULL -- text string for updating user
      , @LogStatus NVARCHAR(50) = NULL --(Initiate | In Progress | Partial | Completed | Error)
      , @debug TINYINT = 0  -- 
												
      )
AS /*******************************************************************************

  **
  ** Author:          leroux@lamininsolutions.com
  ** Date:            2016-08-27
  ********************************************************************************
  ** Change History
  ********************************************************************************
  ** Date        Author     Description
  ** ----------  ---------  -----------------------------------------------------
    add settings option to exclude procedure from executing detail logging
  ******************************************************************************/

  /*
  DECLARE @ProcessBatch_ID INT = 0;
  
  EXEC [dbo].[spMFProcessBatch_Upsert]

      @ProcessBatch_ID = @ProcessBatch_ID OUTPUT
    , @ProcessType = 'Test'
    , @LogText = 'Testing'
    , @LogStatus = 'Start'
    , @debug = 1
  
	select * from MFProcessBatch where ProcessBatch_ID = @ProcessBatch_ID

	WAITFOR DELAY '00:00:02'

  EXEC [dbo].[spMFProcessBatch_Upsert]

      @ProcessBatch_ID = @ProcessBatch_ID
    , @ProcessType = 'Test'
    , @LogText = 'Testing Complete'
    , @LogStatus = 'Complete'
    , @debug = 1
  
	select * from MFProcessBatch where ProcessBatch_ID = @ProcessBatch_ID


  */
  
      BEGIN

            SET NOCOUNT ON;
            SET XACT_ABORT ON;
	 -------------------------------------------------------------
    -- Logging Variables
    -------------------------------------------------------------
            DECLARE @ProcedureName AS NVARCHAR(128) = '[dbo].[spMFProcessBatch_Upsert]';
            DECLARE @DefaultDebugText AS NVARCHAR(256) = 'Proc: %s Step: %s';
            DECLARE @ProcedureStep AS NVARCHAR(128) = 'Start';
            DECLARE @DebugText AS NVARCHAR(256) = '';
			DEClare @DetailLoggingIsActive SMALLINT = 0;
            DECLARE @rowcount AS INT = 0;


BEGIN TRY

IF @ProcessBatch_ID = 0 
SET @ProcessBatch_ID = NULL;
SELECT @DetailLoggingIsActive= CAST(value AS INT) FROM mfsettings WHERE name = 'App_DetailLogging'

/*************************************************************************************
	CREATE NEW BATCH ID
*************************************************************************************/
BEGIN
IF (@DetailLoggingIsActive = 1)
BEGIN

      IF (@ProcessBatch_ID IS NULL )
         BEGIN
			SET @ProcedureStep = 'INSERT INTO [dbo].[MFProcessBatch]'

               INSERT   INTO [dbo].[MFProcessBatch]
                        ( [ProcessType]
                        , [LogType]
                        , [LogText]
                        , [Status]
	                    )
               VALUES   ( @ProcessType
                        , @LogType
                        , @LogText
                        , @LogStatus
                              
	                    );

               SET @ProcessBatch_ID = SCOPE_IDENTITY();

               IF @debug > 100
			   begin
                        RAISERROR(@DefaultDebugText,10,1,@ProcedureName,@ProcedureStep);
						PRINT 'ProcessBatch_ID: ' + ISNULL(CAST(@ProcessBatch_ID AS VARCHAR(10)),'null')
				end
			      goTO EXIT_PROC                  
         END;
END --CREATE NEW BATCH ID

/*************************************************************************************
	PARAMETER VALIDATION
*************************************************************************************/

BEGIN
	SET @ProcedureStep = 'PARAMETER VALIDATION'
      IF ( NULLIF(@ProcessBatch_ID, 0) IS NOT NULL
         AND NOT EXISTS ( SELECT    1
                          FROM      [dbo].[MFProcessBatch]
                          WHERE     [ProcessBatch_ID] = @ProcessBatch_ID )
		 )
         BEGIN

               SET @LogText = 'ProcessBatch_ID [' + ISNULL(CAST(@ProcessBatch_ID AS VARCHAR(20)), '(null)')
                   + '] not found - process aborting...';	
               SET @LogStatus = 'failed';

               IF @debug > 100
			   Begin
                     RAISERROR(@DefaultDebugText,10,1,@ProcedureName,@ProcedureStep );
				END
		
    --           RAISERROR(@LogText,16,1);						 
			   goTO EXIT_PROC;
         END; --IF NOT EXISTS(SELECT 1 FROM EpicorEnt.ProcessBatch WHERE ProcessBatch_ID = @ProcessBatch_ID)

END --PARAMETER VALIDATION



/*************************************************************************************
	UPDATE EXISTING BATCH ID
*************************************************************************************/
 BEGIN

       SET @ProcedureStep = 'UPDATE [dbo].[MFProcessBatch]'

       UPDATE   [dbo].[MFProcessBatch]
       SET   [LogType] = CASE WHEN @LogType IS NULL THEN [LogType]
                                 ELSE @LogType
                            END
              , [LogText] =  CASE WHEN @LogText IS NULL THEN [LogText]
                                 ELSE @LogText
                            END
              , [Status] = @LogStatus
			--, [DurationSeconds] = CONVERT(varchar(12), 
   --     CAST([CreatedOnUTC] as datetime) - 
   --     CAST(GETUTCDATE() as datetime)
   --    , 114) 
              , [DurationSeconds] = DATEDIFF(ms, [CreatedOnUTC], GETUTCDATE()) / CONVERT(DECIMAL(18,3),1000)
       FROM     [dbo].[MFProcessBatch]
       WHERE    [ProcessBatch_ID] = @ProcessBatch_ID;

       SET @rowcount = @@ROWCOUNT

       IF @debug > 100
                RAISERROR(@DefaultDebugText,10,1,@ProcedureName,@ProcedureStep);

     goTO EXIT_PROC
 END; --UPDATE EXISTING BATCH ID
 END; -- detaillogging is active

EXIT_PROC:
	RETURN 1;		
	SET NOCOUNT OFF;
END TRY
BEGIN CATCH
    -----------------------------------------------------------------------------
    -- INSERTING ERROR DETAILS INTO LOG TABLE
    -----------------------------------------------------------------------------
            DECLARE @ErrorMessage NVARCHAR(500) = ERROR_MESSAGE()

            INSERT    INTO dbo.[MFLog]
                    ( [SPName]
                    , [ProcedureStep]
                    , [ErrorNumber]
                    , [ErrorMessage]
                    , [ErrorProcedure]
                    , [ErrorState]
                    , [ErrorSeverity]
                    , [ErrorLine]
                    )
            VALUES    ( @ProcedureName
                    , @ProcedureStep
                    , ERROR_NUMBER()
                    , @ErrorMessage
                    , ERROR_PROCEDURE()
                    , ERROR_STATE()
                    , ERROR_SEVERITY()
                    , ERROR_LINE()
                    );
		  
    -----------------------------------------------------------------------------
    -- DISPLAYING ERROR DETAILS
    -----------------------------------------------------------------------------
            SELECT    ERROR_NUMBER() AS [ErrorNumber]
                    , @ErrorMessage AS [ErrorMessage]
                    , ERROR_PROCEDURE() AS [ErrorProcedure]
                    , ERROR_STATE() AS [ErrorState]
                    , ERROR_SEVERITY() AS [ErrorSeverity]
                    , ERROR_LINE() AS [ErrorLine]
                    , @ProcedureName AS [ProcedureName]
                    , @ProcedureStep AS [ProcedureStep];

            SET @LogText = 'SQLERROR %s in %s at %s'
            RAISERROR(@LogText, 16,1, @ErrorMessage, @ProcedureName, @ProcedureStep)

            RETURN -1;
    END CATCH;

END;


GO


